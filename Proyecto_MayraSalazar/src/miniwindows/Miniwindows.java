/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package miniwindows;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.GraphicsEnvironment;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.EOFException;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.file.Files;
import java.nio.file.attribute.BasicFileAttributes;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.filechooser.FileView;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;

/**
 *
 * @author Mayra Salazar
 */
public class Miniwindows extends javax.swing.JFrame {

    /**
     * Creates new form Miniwindows
     */
    public Miniwindows() {
        initComponents();
        this.pn_login.setVisibleLogo(false);
        this.pn_login.setIcon(new ImageIcon(Toolkit.getDefaultToolkit().createImage("./sky.jpg").getScaledInstance(this.getWidth(), this.getHeight(), 0)));
        this.pn_login.setVisible(true);
        this.pn_agregar.setVisibleLogo(false);
        this.agregarUs.setTitle("Agrega un usuario");
        this.pn_agregar.setIcon(new ImageIcon(Toolkit.getDefaultToolkit().createImage("./space.jpg").getScaledInstance(this.getWidth(), this.getHeight(), 0)));
        this.pn_agregar.setVisible(true);
        this.setTitle("Log to MiniWindows System");
        this.consola.setCaretColor(Color.white);
        this.Consola.setTitle("MiniWindows Console");
        this.deskpanel.setIcon(new ImageIcon(Toolkit.getDefaultToolkit().createImage("./flor.jpg").getScaledInstance(this.getWidth(), this.getHeight(), 0)));
        this.Desktop.setTitle("Welcome to MiniWindows!");
        this.MP3Player.setTitle("MiniWindowsPlayer");
        this.Editor.setTitle("Miniwindows Editor");
        HiloHora hour = new HiloHora(hora);
        try {
            hour.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
        String[] font = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
        fonts = new DefaultComboBoxModel(font);
        this.comboxFonts.setModel(fonts);
        this.jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        if (fileusers.exists()) {
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Desktop = new javax.swing.JDialog();
        deskpanel = new com.bolivia.panel.JCPanel();
        opencmd = new javax.swing.JButton();
        openplayer = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        barPrincipal = new javax.swing.JMenuBar();
        hora = new javax.swing.JMenu();
        name = new javax.swing.JMenu();
        logOut = new javax.swing.JMenu();
        change = new javax.swing.JMenuItem();
        cambiarc = new javax.swing.JMenuItem();
        addUser = new javax.swing.JMenuItem();
        apagar = new javax.swing.JMenuItem();
        Consola = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        consola = new javax.swing.JTextPane();
        Calendar = new javax.swing.JDialog();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        MP3Player = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        delsong = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaMusic = new javax.swing.JList<>();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        backsong = new javax.swing.JButton();
        playpause = new javax.swing.JButton();
        forwardsong = new javax.swing.JButton();
        addMusic = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        lb_playing = new javax.swing.JLabel();
        Archivos = new javax.swing.JFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        archivos = new javax.swing.JTree();
        tf_dir = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablafiles = new javax.swing.JTable();
        Editor = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tpText = new javax.swing.JTextPane();
        jToolBar1 = new javax.swing.JToolBar();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        comboxFonts = new javax.swing.JComboBox<>();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        comboxSize = new javax.swing.JComboBox<>();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btnBold = new javax.swing.JButton();
        btnItalics = new javax.swing.JButton();
        btnUnderline = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnColor = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        btnLeft = new javax.swing.JButton();
        btnCenter = new javax.swing.JButton();
        btnRight = new javax.swing.JButton();
        btnJustified = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mibtnSave = new javax.swing.JMenuItem();
        mibtnSaveAs = new javax.swing.JMenuItem();
        mibtnLoad = new javax.swing.JMenuItem();
        Visor = new javax.swing.JDialog();
        Mensajes = new javax.swing.JDialog();
        agregarUs = new javax.swing.JDialog();
        pn_agregar = new com.bolivia.panel.JCPanel();
        jLabel5 = new javax.swing.JLabel();
        tf_adduser = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        pf_addpass = new javax.swing.JPasswordField();
        agregar = new javax.swing.JButton();
        pn_login = new com.bolivia.panel.JCPanel();
        jLabel1 = new javax.swing.JLabel();
        tf_user = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        pf_password = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        opencmd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/miniwindows/cmd.jpg"))); // NOI18N
        opencmd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opencmdActionPerformed(evt);
            }
        });

        openplayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/miniwindows/player.png"))); // NOI18N
        openplayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openplayerActionPerformed(evt);
            }
        });

        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deskpanelLayout = new javax.swing.GroupLayout(deskpanel);
        deskpanel.setLayout(deskpanelLayout);
        deskpanelLayout.setHorizontalGroup(
            deskpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deskpanelLayout.createSequentialGroup()
                .addGroup(deskpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(opencmd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openplayer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 637, Short.MAX_VALUE))
        );
        deskpanelLayout.setVerticalGroup(
            deskpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deskpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(opencmd, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(openplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(175, Short.MAX_VALUE))
        );

        barPrincipal.setBackground(new java.awt.Color(0, 0, 0));
        barPrincipal.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        barPrincipal.setForeground(new java.awt.Color(255, 255, 255));
        barPrincipal.add(hora);
        barPrincipal.add(name);

        logOut.setText("Log");

        change.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        change.setText("Cerrar Sesión");
        logOut.add(change);

        cambiarc.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        cambiarc.setText("Cambiar Contraseña");
        cambiarc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarcActionPerformed(evt);
            }
        });
        logOut.add(cambiarc);

        addUser.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        addUser.setText("Agregar Usuario");
        addUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserActionPerformed(evt);
            }
        });
        logOut.add(addUser);

        apagar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_MASK));
        apagar.setText("Apagar");
        apagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apagarActionPerformed(evt);
            }
        });
        logOut.add(apagar);

        barPrincipal.add(logOut);

        Desktop.setJMenuBar(barPrincipal);

        javax.swing.GroupLayout DesktopLayout = new javax.swing.GroupLayout(Desktop.getContentPane());
        Desktop.getContentPane().setLayout(DesktopLayout);
        DesktopLayout.setHorizontalGroup(
            DesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deskpanel, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
        );
        DesktopLayout.setVerticalGroup(
            DesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deskpanel, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
        );

        Consola.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        consola.setBackground(new java.awt.Color(0, 0, 0));
        consola.setFont(new java.awt.Font("Microsoft New Tai Lue", 0, 12)); // NOI18N
        consola.setForeground(new java.awt.Color(255, 255, 255));
        consola.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                consolaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(consola);

        javax.swing.GroupLayout ConsolaLayout = new javax.swing.GroupLayout(Consola.getContentPane());
        Consola.getContentPane().setLayout(ConsolaLayout);
        ConsolaLayout.setHorizontalGroup(
            ConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        ConsolaLayout.setVerticalGroup(
            ConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout CalendarLayout = new javax.swing.GroupLayout(Calendar.getContentPane());
        Calendar.getContentPane().setLayout(CalendarLayout);
        CalendarLayout.setHorizontalGroup(
            CalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CalendarLayout.createSequentialGroup()
                .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 228, Short.MAX_VALUE))
        );
        CalendarLayout.setVerticalGroup(
            CalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CalendarLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(103, Short.MAX_VALUE))
        );

        MP3Player.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        MP3Player.setTitle("MP3Player");
        MP3Player.setBackground(new java.awt.Color(0, 153, 153));

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        delsong.setText("X");
        delsong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delsongActionPerformed(evt);
            }
        });

        jButton4.setText("||");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 153));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Holita Player");

        listaMusic.setModel(new DefaultListModel());
        jScrollPane2.setViewportView(listaMusic);

        jButton3.setText("S");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        backsong.setText("<<");
        backsong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backsongActionPerformed(evt);
            }
        });

        playpause.setText("►");
        playpause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playpauseActionPerformed(evt);
            }
        });

        forwardsong.setText(">>");
        forwardsong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardsongActionPerformed(evt);
            }
        });

        addMusic.setText("Add");
        addMusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMusicActionPerformed(evt);
            }
        });

        lb_playing.setText("Playing: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 419, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lb_playing, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delsong, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(31, 31, 31))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(backsong, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playpause, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(forwardsong)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(addMusic, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(78, 78, 78)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(41, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 371, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(8, 8, 8)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(8, 8, 8)
                    .addComponent(lb_playing)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(backsong, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(playpause)
                        .addComponent(jButton4)
                        .addComponent(forwardsong, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3)
                        .addComponent(addMusic, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                    .addGap(28, 28, 28)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(delsong, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout MP3PlayerLayout = new javax.swing.GroupLayout(MP3Player.getContentPane());
        MP3Player.getContentPane().setLayout(MP3PlayerLayout);
        MP3PlayerLayout.setHorizontalGroup(
            MP3PlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        MP3PlayerLayout.setVerticalGroup(
            MP3PlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Z");
        archivos.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        archivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                archivosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(archivos);

        jLabel4.setText("Buscar");

        tablafiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Fecha", "Tipo", "Tamaño"
            }
        ));
        jScrollPane4.setViewportView(tablafiles);

        javax.swing.GroupLayout ArchivosLayout = new javax.swing.GroupLayout(Archivos.getContentPane());
        Archivos.getContentPane().setLayout(ArchivosLayout);
        ArchivosLayout.setHorizontalGroup(
            ArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ArchivosLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(tf_dir, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(ArchivosLayout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        ArchivosLayout.setVerticalGroup(
            ArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ArchivosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_dir)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(8, 163, 179));

        tpText.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        tpText.setAutoscrolls(false);
        tpText.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane5.setViewportView(tpText);

        jToolBar1.setRollover(true);
        jToolBar1.add(jSeparator7);

        comboxFonts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboxFontsActionPerformed(evt);
            }
        });
        jToolBar1.add(comboxFonts);
        jToolBar1.add(jSeparator6);

        comboxSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8", "9", "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "28", "36", "48", "72" }));
        comboxSize.setPreferredSize(new java.awt.Dimension(20, 20));
        comboxSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboxSizeActionPerformed(evt);
            }
        });
        jToolBar1.add(comboxSize);
        jToolBar1.add(jSeparator3);

        btnBold.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnBold.setText("B");
        btnBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoldActionPerformed(evt);
            }
        });
        jToolBar1.add(btnBold);

        btnItalics.setFont(new java.awt.Font("Times New Roman", 2, 24)); // NOI18N
        btnItalics.setText("I");
        btnItalics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItalicsActionPerformed(evt);
            }
        });
        jToolBar1.add(btnItalics);

        btnUnderline.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        btnUnderline.setText("U");
        btnUnderline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnderlineActionPerformed(evt);
            }
        });
        jToolBar1.add(btnUnderline);
        jToolBar1.add(jSeparator4);

        btnColor.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        btnColor.setText("Color");
        btnColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnColorMouseClicked(evt);
            }
        });
        jToolBar1.add(btnColor);
        jToolBar1.add(jSeparator5);

        btnLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/miniwindows/left-alignment.png"))); // NOI18N
        btnLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeftActionPerformed(evt);
            }
        });
        jToolBar1.add(btnLeft);

        btnCenter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/miniwindows/center-alignment.png"))); // NOI18N
        btnCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCenterActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCenter);

        btnRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/miniwindows/right-alignment.png"))); // NOI18N
        btnRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRightActionPerformed(evt);
            }
        });
        jToolBar1.add(btnRight);

        btnJustified.setIcon(new javax.swing.ImageIcon(getClass().getResource("/miniwindows/justify.png"))); // NOI18N
        btnJustified.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJustifiedActionPerformed(evt);
            }
        });
        jToolBar1.add(btnJustified);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jMenu1.setText("Archivo");

        mibtnSave.setText("Guardar");
        mibtnSave.setEnabled(false);
        mibtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mibtnSaveActionPerformed(evt);
            }
        });
        jMenu1.add(mibtnSave);

        mibtnSaveAs.setText("Guardar Como");
        mibtnSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mibtnSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(mibtnSaveAs);

        mibtnLoad.setText("Cargar");
        mibtnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mibtnLoadActionPerformed(evt);
            }
        });
        jMenu1.add(mibtnLoad);

        jMenuBar1.add(jMenu1);

        Editor.setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout EditorLayout = new javax.swing.GroupLayout(Editor.getContentPane());
        Editor.getContentPane().setLayout(EditorLayout);
        EditorLayout.setHorizontalGroup(
            EditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        EditorLayout.setVerticalGroup(
            EditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout VisorLayout = new javax.swing.GroupLayout(Visor.getContentPane());
        Visor.getContentPane().setLayout(VisorLayout);
        VisorLayout.setHorizontalGroup(
            VisorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        VisorLayout.setVerticalGroup(
            VisorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MensajesLayout = new javax.swing.GroupLayout(Mensajes.getContentPane());
        Mensajes.getContentPane().setLayout(MensajesLayout);
        MensajesLayout.setHorizontalGroup(
            MensajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        MensajesLayout.setVerticalGroup(
            MensajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("User");

        tf_adduser.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Password");

        agregar.setText("Agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pn_agregarLayout = new javax.swing.GroupLayout(pn_agregar);
        pn_agregar.setLayout(pn_agregarLayout);
        pn_agregarLayout.setHorizontalGroup(
            pn_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_agregarLayout.createSequentialGroup()
                .addGroup(pn_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pn_agregarLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tf_adduser, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pn_agregarLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pf_addpass, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(62, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pn_agregarLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(138, 138, 138))
        );
        pn_agregarLayout.setVerticalGroup(
            pn_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_agregarLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(pn_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_adduser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(pn_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pf_addpass, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout agregarUsLayout = new javax.swing.GroupLayout(agregarUs.getContentPane());
        agregarUs.getContentPane().setLayout(agregarUsLayout);
        agregarUsLayout.setHorizontalGroup(
            agregarUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pn_agregar, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        agregarUsLayout.setVerticalGroup(
            agregarUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pn_agregar, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("User");

        tf_user.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Password");

        jButton1.setText("Log In");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Shut Down");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pn_loginLayout = new javax.swing.GroupLayout(pn_login);
        pn_login.setLayout(pn_loginLayout);
        pn_loginLayout.setHorizontalGroup(
            pn_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_loginLayout.createSequentialGroup()
                .addGroup(pn_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pn_loginLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tf_user, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pn_loginLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pf_password, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pn_loginLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        pn_loginLayout.setVerticalGroup(
            pn_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_loginLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(pn_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_user, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(pn_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pf_password, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(pn_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pn_login, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pn_login, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (tf_user.getText().equals(admin) && pf_password.getText().equals(password)) {
            logAs = tf_user.getText();
            this.deskpanel.setVisibleLogo(false);
            this.Desktop.pack();
            this.Desktop.setLocationRelativeTo(this);
            this.Desktop.setVisible(true);
            name.setText(logAs);
            path = "./Z\\Users\\" + logAs;
            System.out.println(path);
            music = new ArrayList();
            listaMusic.setModel(new DefaultListModel());
            DefaultTreeModel modelo = (DefaultTreeModel) archivos.getModel();
            DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) modelo.getRoot();
            String pathU = "./Z";
            listar_todo(new File(pathU), raiz);
            modelo.reload();
            archivos.setModel(modelo);

        } else {
            boolean isUser = false;
            for (int i = 0; i < users.size(); i++) {
                if (tf_user.getText().equals(users.get(i).getUser()) && pf_password.getText().equals(users.get(i).getPassword())) {
                    isUser = true;
                }
            }
            if (isUser) {
                logAs = tf_user.getText();
                this.deskpanel.setVisibleLogo(false);
                this.Desktop.pack();
                this.Desktop.setLocationRelativeTo(this);
                this.Desktop.setVisible(true);
                name.setText(logAs);
                path = "./Z\\Users\\" + logAs;
                music = new ArrayList();
                listaMusic.setModel(new DefaultListModel());
                DefaultTreeModel modelo = (DefaultTreeModel) archivos.getModel();
                DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) modelo.getRoot();
                listar_todo(new File(path), raiz);
                archivos.setModel(modelo);
            } else {
                JOptionPane.showMessageDialog(this, "No existe el usuario.");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void opencmdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opencmdActionPerformed
        this.Consola.pack();
        this.Consola.setLocationRelativeTo(this);
        this.Consola.setVisible(true);
        this.consola.setText(path + ">\n");
    }//GEN-LAST:event_opencmdActionPerformed

    private void consolaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consolaKeyPressed
        this.consola.setCaretColor(Color.white);
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                String text = this.consola.getText();
                String textoPane = this.consola.getText();
                String[] lines = text.split("\n");
                String lastline = lines[lines.length - 1];
                Scanner read = new Scanner(lastline);
                read.useDelimiter(">");
                String[] containers = new String[1];
                int index = 0;
                while (read.hasNext()) {
                    containers[index] = read.next();
                    index++;
                }
                if (containers[0] != null) {
                    String dir = containers[0];
                    if (dir.contains("mkdir ")) {
                        dir = dir.replace("mkdir ", "").replace(" ", "");
                        if (createDirectory(path + "\\" + dir)) {
                            textoPane += "\n El directorio ya existe\n";
                        }
                    } else if (dir.contains("rm ")) {
                        dir = dir.replace("rm ", "");
                        borrar(path + "\\" + dir);
                    } else if (dir.contains("cd ") && !dir.contains("..")) {
                        dir = dir.replace("cd ", "");
                        if ((new File(path += "\\" + dir).exists())) {
                            System.out.println("exists");
                        } else {
                            textoPane += "\n El directorio no existe";
                            path = path.replace((path.substring(path.lastIndexOf("\\"), path.length())), "");
                        }
                    } else if (dir.contains("cd ..")) {
                        if (logAs.equals("Admin") && !path.equals("./Z")) {
                            path = path.replace((path.substring(path.lastIndexOf("\\"), path.length())), "");
                        } else if (!path.equals("./Z\\Users\\" + logAs)) {

                        }
                    } else if (dir.contains("time")) {
                        DateFormat f = new SimpleDateFormat("HH:mm:ss");
                        Date date = new Date();
                        textoPane += "\n La hora actual es: " + f.format(date);
                    } else if (dir.contains("date")) {
                        Date date = new Date();
                        DateFormat f = new SimpleDateFormat("dd/MMMM/YYYY");
                        textoPane += "\n La fecha actual es: " + f.format(date);
                    } else if (dir.contains("help")) {
                        textoPane += "\n-----Help------"
                                + "\n mkdir ------- Crea un directorio"
                                + "\n rm ---------- Elimina un archivo o directorio"
                                + "\n cd ---------- Commando para moverse entre carpetas"
                                + "\n time -------- Da la hora actual"
                                + "\n date -------- Da la fecha actual"
                                + "\n dir --------- Lista todo en la carpeta actual";
                    } else if (dir.contains("dir") && !dir.contains("mkdir")) {
                        System.out.println(path);
                        File direc = new File(path);
                        File[] files = direc.listFiles();
                        for (File file : files) {
                            if (file.isDirectory()) {
                                textoPane += "\n Directorio: " + file.getName();
                            }
                            if (file.isFile()) {
                                textoPane += "\nArchivo: " + file.getName();
                            }
                        }
                    } else {
                        textoPane += "\nIngrese un comando válido, escriba help para ver comandos\n";
                    }
                    index = 0;
                }
                textoPane += "\n" + path + ">";
                consola.setText(textoPane);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_consolaKeyPressed

    private void openplayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openplayerActionPerformed
        this.MP3Player.pack();
        this.MP3Player.setLocationRelativeTo(this);
        this.MP3Player.setVisible(true);
    }//GEN-LAST:event_openplayerActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (player.getStatus() > 0) {
            player.stop();
        } else {
            JOptionPane.showMessageDialog(MP3Player, "No hay canción puesta");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (player.getStatus() == 1) {
            player.pause();
        } else {
            JOptionPane.showMessageDialog(MP3Player, "No ha seleccionado una canción");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void delsongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delsongActionPerformed
        DefaultListModel modelo = new DefaultListModel();
        listaMusic.setModel(modelo);
    }//GEN-LAST:event_delsongActionPerformed

    private void addMusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMusicActionPerformed
        JFileChooser chooser = new JFileChooser(path + "\\Music");
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Música", "mp3");
        chooser.setFileFilter(filtro);
        int op = chooser.showOpenDialog(MP3Player);
        if (op == JFileChooser.APPROVE_OPTION) {
            if (chooser.getSelectedFile() != null && chooser.getSelectedFile().exists()) {
                music.add(chooser.getSelectedFile());
                DefaultListModel modelo = (DefaultListModel) listaMusic.getModel();
                modelo.addElement(chooser.getSelectedFile().getName());
                listaMusic.setModel(modelo);
            }
        } else {
            System.out.println("No se agregó nada");
        }
    }//GEN-LAST:event_addMusicActionPerformed

    private void forwardsongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardsongActionPerformed
        player.stop();
        if ((listaMusic.getSelectedIndex() + 1) <= listaMusic.getLastVisibleIndex()) {
            try {
                FileInputStream input = new FileInputStream(music.get(listaMusic.getSelectedIndex() + 1));
                player = new MP3Player(input);
                player.play();
                lb_playing.setText("Playing: " + music.get(listaMusic.getSelectedIndex() + 1).getName());
                listaMusic.setSelectedIndex(listaMusic.getSelectedIndex() + 1);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (player == null) {
            JOptionPane.showMessageDialog(MP3Player, "Seleccione una canción primero");
        } else {
            JOptionPane.showMessageDialog(MP3Player, "Ya no hay más canciones en la lista");
        }
    }//GEN-LAST:event_forwardsongActionPerformed

    private void playpauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playpauseActionPerformed
        if (player == null && listaMusic.getSelectedIndex() >= 0) {
            playMusic();
        } else if (player.getStatus() == 1) {
            player.stop();
            playMusic();
        } else if (player.getStatus() == 2) {
            player.resume();
        } else if (player.getStatus() == 3) {
            player.setStatus(0);
            playMusic();
        } else {
            JOptionPane.showMessageDialog(MP3Player, "Seleccione una canción antes");
        }
    }//GEN-LAST:event_playpauseActionPerformed

    private void backsongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backsongActionPerformed
        player.stop();
        if ((listaMusic.getSelectedIndex() - 1) >= 0) {
            try {
                FileInputStream input = new FileInputStream(music.get(listaMusic.getSelectedIndex() - 1));
                player = new MP3Player(input);
                player.play();
                lb_playing.setText("Playing: " + music.get(listaMusic.getSelectedIndex() - 1).getName());
                listaMusic.setSelectedIndex(listaMusic.getSelectedIndex() - 1);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (player == null) {
            JOptionPane.showMessageDialog(MP3Player, "Seleccione una canción primero");
        } else {
            JOptionPane.showMessageDialog(MP3Player, "Ya no hay más canciones en la lista");
        }
    }//GEN-LAST:event_backsongActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.Editor.pack();
        this.Editor.setLocationRelativeTo(this.Desktop);
        this.Editor.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void cambiarcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cambiarcActionPerformed

    private void addUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserActionPerformed
        this.agregarUs.pack();
        this.agregarUs.setLocationRelativeTo(this.Desktop);
        this.agregarUs.setVisible(true);
    }//GEN-LAST:event_addUserActionPerformed

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        if (tf_adduser != null && pf_addpass!= null) {
            users.add(new User(tf_adduser.getText(), pf_addpass.getText()));
            addUsers();
            cargarUsers();
        }
    }//GEN-LAST:event_agregarActionPerformed

    private void apagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apagarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_apagarActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.Archivos.pack();
        this.Archivos.setLocationRelativeTo(this);
        this.Archivos.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void comboxSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboxSizeActionPerformed
        String Size;
        Size = (String) this.comboxSize.getSelectedItem();
        doc = this.tpText.getStyledDocument();
        int j = 0, posicion = 0;
        for (int i = this.tpText.getSelectionStart(); i < this.tpText.getSelectionEnd(); i++) {
            posicion = this.tpText.getSelectionStart() + j;
            Element element = doc.getCharacterElement(posicion);
            AttributeSet as = element.getAttributes();
            colour = StyleConstants.getForeground(as);
            fontLetter = StyleConstants.getFontFamily(as);
            bold = StyleConstants.isBold(as);
            italics = StyleConstants.isItalic(as);
            underline = StyleConstants.isUnderline(as);
            size = Integer.parseInt(Size);
            //background = StyleConstants.getBackground(as);
            Edit(posicion);
            j++;
        }
    }//GEN-LAST:event_comboxSizeActionPerformed

    private void comboxFontsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboxFontsActionPerformed
        this.fontLetter = (String) this.comboxFonts.getSelectedItem();
        doc = this.tpText.getStyledDocument();
        int j = 0, posicion = 0;
        for (int i = this.tpText.getSelectionStart(); i < this.tpText.getSelectionEnd(); i++) {
            posicion = this.tpText.getSelectionStart() + j;
            Element element = doc.getCharacterElement(posicion);
            AttributeSet as = element.getAttributes();
            colour = StyleConstants.getForeground(as);
            bold = StyleConstants.isBold(as);
            italics = StyleConstants.isItalic(as);
            underline = StyleConstants.isUnderline(as);
            size = StyleConstants.getFontSize(as);
            //background = StyleConstants.getBackground(as);
            Edit(posicion);
            j++;
        }
    }//GEN-LAST:event_comboxFontsActionPerformed

    private void btnColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnColorMouseClicked
        colour = JColorChooser.showDialog(this, "Color", Color.blue);
        doc = this.tpText.getStyledDocument();

        int j = 0, posicion = 0;
        for (int i = this.tpText.getSelectionStart(); i < this.tpText.getSelectionEnd(); i++) {
            posicion = this.tpText.getSelectionStart() + j;
            Element element = doc.getCharacterElement(posicion);
            AttributeSet as = element.getAttributes();
            fontLetter = StyleConstants.getFontFamily(as);
            bold = StyleConstants.isBold(as);
            italics = StyleConstants.isItalic(as);
            underline = StyleConstants.isUnderline(as);
            size = StyleConstants.getFontSize(as);
            //background = StyleConstants.getBackground(as);
            Edit(posicion);
            j++;
        }
    }//GEN-LAST:event_btnColorMouseClicked

    private void mibtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mibtnSaveActionPerformed
        saveFile(currentFile);
    }//GEN-LAST:event_mibtnSaveActionPerformed

    private void mibtnSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mibtnSaveAsActionPerformed
        final File dirToLock = new File(path+"\\Documents");
        JFileChooser fc = new JFileChooser(dirToLock);
        fc.setFileView(new FileView() {
            @Override
            public Boolean isTraversable(File f) {
                return dirToLock.equals(f);
            }
        });
        disableNav(fc);
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = new File(fc.getSelectedFile()+".editordoc");
            saveFile(file);
        }

    }//GEN-LAST:event_mibtnSaveAsActionPerformed

    private void mibtnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mibtnLoadActionPerformed
        if (JOptionPane.showConfirmDialog(null,
            "¿Está seguro de dejar de trabajar con el archivo?") == 0) {
        final File dirToLock = new File(path+"\\Documents");
        JFileChooser fc = new JFileChooser(dirToLock);
        fc.setFileView(new FileView() {
            @Override
            public Boolean isTraversable(File f) {
                return dirToLock.equals(f);
            }
        });
        disableNav(fc);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openFile(fc.getSelectedFile());
            mibtnSave.setEnabled(true);
        }
        }
    }//GEN-LAST:event_mibtnLoadActionPerformed

    private void btnBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoldActionPerformed
        if (bold) {
            bold = false;
        } else {
            bold = true;
        }
        doc = this.tpText.getStyledDocument();
        int j = 0, posicion = 0;
        for (int i = this.tpText.getSelectionStart(); i < this.tpText.getSelectionEnd(); i++) {
            posicion = this.tpText.getSelectionStart() + j;
            Element element = doc.getCharacterElement(posicion);
            AttributeSet as = element.getAttributes();
            colour = StyleConstants.getForeground(as);
            fontLetter = StyleConstants.getFontFamily(as);
            italics = StyleConstants.isItalic(as);
            underline = StyleConstants.isUnderline(as);
            size = StyleConstants.getFontSize(as);
            //background = StyleConstants.getBackground(as);
            Edit(posicion);
            j++;
        }
    }//GEN-LAST:event_btnBoldActionPerformed

    private void btnItalicsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItalicsActionPerformed
        if (italics) {
            italics = false;
        } else {
            italics = true;
        }
        doc = this.tpText.getStyledDocument();
        int j = 0, posicion = 0;
        for (int i = this.tpText.getSelectionStart(); i < this.tpText.getSelectionEnd(); i++) {
            posicion = this.tpText.getSelectionStart() + j;
            Element element = doc.getCharacterElement(posicion);
            AttributeSet as = element.getAttributes();
            colour = StyleConstants.getForeground(as);
            fontLetter = StyleConstants.getFontFamily(as);
            bold = StyleConstants.isBold(as);
            underline = StyleConstants.isUnderline(as);
            size = StyleConstants.getFontSize(as);
            //background = StyleConstants.getBackground(as);
            Edit(posicion);
            j++;
        }
    }//GEN-LAST:event_btnItalicsActionPerformed

    private void btnUnderlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnderlineActionPerformed
         if (underline) {
            underline = false;
        } else {
            underline = true;
        }
        doc = this.tpText.getStyledDocument();
        int j = 0, posicion = 0;
        for (int i = this.tpText.getSelectionStart(); i < this.tpText.getSelectionEnd(); i++) {
            posicion = this.tpText.getSelectionStart() + j;
            Element element = doc.getCharacterElement(posicion);
            AttributeSet as = element.getAttributes();
            colour = StyleConstants.getForeground(as);
            fontLetter = StyleConstants.getFontFamily(as);
            bold = StyleConstants.isBold(as);
            italics = StyleConstants.isItalic(as);
            size = StyleConstants.getFontSize(as);
            //background = StyleConstants.getBackground(as);
            Edit(posicion);
            j++;
        }
    }//GEN-LAST:event_btnUnderlineActionPerformed

    private void btnCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCenterActionPerformed
       if (center) {
            center = false;
            left = true;
        } else {
            left = false;
            center = true;
            right = false;
            justified = false;
        }
        EditIdent();
    }//GEN-LAST:event_btnCenterActionPerformed

    private void btnLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftActionPerformed
        left = true;
        center = false;
        right = false;
        justified = false;
        EditIdent();
    }//GEN-LAST:event_btnLeftActionPerformed

    private void btnRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightActionPerformed
         if (right) {
            right = false;
            left = true;
        } else {
            left = false;
            center = false;
            right = true;
            justified = false;
        }
        EditIdent();
<<<<<<< HEAD
    }//GEN-LAST:event_btnCenterMouseClicked

    private void mibtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mibtnSaveActionPerformed
        saveFile(currentFile);
    }//GEN-LAST:event_mibtnSaveActionPerformed

    private void mibtnSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mibtnSaveAsActionPerformed
        final File dirToLock = new File(path + "\\Documents");
        JFileChooser fc = new JFileChooser(dirToLock);
        fc.setFileView(new FileView() {
            @Override
            public Boolean isTraversable(File f) {
                return dirToLock.equals(f);
            }
        });
        disableNav(fc);
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = new File(fc.getSelectedFile() + ".editordoc");
            saveFile(file);
        }

    }//GEN-LAST:event_mibtnSaveAsActionPerformed

    private void mibtnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mibtnLoadActionPerformed
        if (JOptionPane.showConfirmDialog(null,
                "¿Está seguro de dejar de trabajar con el archivo?") == 0) {
            final File dirToLock = new File(path + "\\Documents");
            JFileChooser fc = new JFileChooser(dirToLock);
            fc.setFileView(new FileView() {
                @Override
                public Boolean isTraversable(File f) {
                    return dirToLock.equals(f);
                }
            });
            disableNav(fc);
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                openFile(fc.getSelectedFile());
                mibtnSave.setEnabled(true);
            }
=======
    }//GEN-LAST:event_btnRightActionPerformed

    private void btnJustifiedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJustifiedActionPerformed
         if (justified) {
            justified = false;
            left = true;
        } else {
            left = false;
            center = false;
            right = false;
            justified = true;
>>>>>>> agile
        }
        EditIdent();
    }//GEN-LAST:event_btnJustifiedActionPerformed

    private void archivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_archivosMouseClicked
        DefaultMutableTreeNode seleccion = (DefaultMutableTreeNode) archivos.getLastSelectedPathComponent();
        try {
            if (!evt.isMetaDown()) {
                File f = null;
                try {
                    f = new File(seleccion.toString());
                } catch (Exception e) {
                }

                DefaultTableModel modelo = (DefaultTableModel) tablafiles.getModel();
                modelo.setRowCount(0);
                File[] files = f.listFiles();
                for (File file : files) {
                    BasicFileAttributes attr = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
                    Object[] arr = {file.getName(), attr.creationTime(), FilenameUtils.getExtension(file.getAbsolutePath()), file.length() + "KB"};
                    modelo.addRow(arr);
                }
                this.tablafiles.setModel(modelo);
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_archivosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Miniwindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Miniwindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Miniwindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Miniwindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Miniwindows().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame Archivos;
    private javax.swing.JDialog Calendar;
    private javax.swing.JDialog Consola;
    private javax.swing.JDialog Desktop;
    private javax.swing.JDialog Editor;
    private javax.swing.JDialog MP3Player;
    private javax.swing.JDialog Mensajes;
    private javax.swing.JDialog Visor;
    private javax.swing.JButton addMusic;
    private javax.swing.JMenuItem addUser;
    private javax.swing.JButton agregar;
    private javax.swing.JDialog agregarUs;
    private javax.swing.JMenuItem apagar;
    private javax.swing.JTree archivos;
    private javax.swing.JButton backsong;
    private javax.swing.JMenuBar barPrincipal;
    private javax.swing.JButton btnBold;
    private javax.swing.JButton btnCenter;
    private javax.swing.JButton btnColor;
    private javax.swing.JButton btnItalics;
    private javax.swing.JButton btnJustified;
    private javax.swing.JButton btnLeft;
    private javax.swing.JButton btnRight;
    private javax.swing.JButton btnUnderline;
    private javax.swing.JMenuItem cambiarc;
    private javax.swing.JMenuItem change;
    private javax.swing.JComboBox<String> comboxFonts;
    private javax.swing.JComboBox<String> comboxSize;
    private javax.swing.JTextPane consola;
    private javax.swing.JButton delsong;
    private com.bolivia.panel.JCPanel deskpanel;
    private javax.swing.JButton forwardsong;
    private javax.swing.JMenu hora;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton9;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
<<<<<<< HEAD
=======
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
>>>>>>> agile
    private javax.swing.JLabel lb_playing;
    private javax.swing.JList<String> listaMusic;
    private javax.swing.JMenu logOut;
    private javax.swing.JMenuItem mibtnLoad;
    private javax.swing.JMenuItem mibtnSave;
    private javax.swing.JMenuItem mibtnSaveAs;
    private javax.swing.JMenu name;
    private javax.swing.JButton opencmd;
    private javax.swing.JButton openplayer;
    private javax.swing.JPasswordField pf_addpass;
    private javax.swing.JPasswordField pf_password;
    private javax.swing.JButton playpause;
    private com.bolivia.panel.JCPanel pn_agregar;
    private com.bolivia.panel.JCPanel pn_login;
    private javax.swing.JTable tablafiles;
    private javax.swing.JTextField tf_adduser;
    private javax.swing.JTextField tf_dir;
    private javax.swing.JTextField tf_user;
    private javax.swing.JTextPane tpText;
    // End of variables declaration//GEN-END:variables

    public boolean createDirectory(String path) {
        if (new File(path).exists()) {
            return true;
        } else {
            new File(path).mkdir();
            return false;
        }

    }

    public void borrar(String path) throws IOException {
        if (new File(path).isDirectory()) {
            FileUtils.deleteDirectory(new File(path));
        } else {
            new File(path).delete();
        }

    }

    public void playMusic() {
        try {
            FileInputStream input = new FileInputStream(music.get(listaMusic.getSelectedIndex()));
            player = new MP3Player(input);
            player.play();
            lb_playing.setText("Playing: " + music.get(listaMusic.getSelectedIndex()).getName());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void listar_todo(File p_raiz, DefaultMutableTreeNode nodo) {
        try {
            ArrayList<File> a = new ArrayList();
            ArrayList<File> b = new ArrayList();
            ArrayList<File> l = new ArrayList();
            for (File temp : p_raiz.listFiles()) {
                if (temp.isFile()) {
                    a.add(temp);

                } else {
                    b.add(0, temp);
                }
            }
            Collections.sort(a);
            Collections.reverse(a);
            Collections.sort(b);
            Collections.reverse(b);
            l.addAll(b);
            l.addAll(a);
            for (File temp : l) {
                if (temp.isFile()) {
                    DefaultMutableTreeNode n = new DefaultMutableTreeNode(temp);
                    nodo.add(n);
                } else {
                    DefaultMutableTreeNode n = new DefaultMutableTreeNode(temp);
                    nodo.add(n);
                    listar_todo(temp, n);
                }
            }
        } catch (Exception e) {
        }
    }

    private void Edit(int posicion) {
        doc = this.tpText.getStyledDocument();
        Style estilo = this.tpText.addStyle("miEstilo", null);
        StyleConstants.setForeground(estilo, colour);
        StyleConstants.setFontFamily(estilo, fontLetter);
        StyleConstants.setFontSize(estilo, size);
        StyleConstants.setBold(estilo, bold);
        StyleConstants.setItalic(estilo, italics);
        StyleConstants.setUnderline(estilo, underline);
        doc.setCharacterAttributes(posicion, 1, this.tpText.getStyle("miEstilo"), true);
        documento = this.tpText.getStyledDocument();
    }

    public void EditIdent() {
        doc = this.tpText.getStyledDocument();
        Style estilo = this.tpText.addStyle("miEstilo", null);
        if (left) {
            StyleConstants.setAlignment(estilo, StyleConstants.ALIGN_LEFT);
            doc.setParagraphAttributes(this.tpText.getSelectionStart(), this.tpText.getSelectionEnd() - this.tpText.getSelectionStart(), this.tpText.getStyle("miEstilo"), true);
        }
        if (center) {
            StyleConstants.setAlignment(estilo, StyleConstants.ALIGN_CENTER);
            doc.setParagraphAttributes(this.tpText.getSelectionStart(), this.tpText.getSelectionEnd() - this.tpText.getSelectionStart(), this.tpText.getStyle("miEstilo"), true);
        }
        if (right) {
            StyleConstants.setAlignment(estilo, StyleConstants.ALIGN_RIGHT);
            doc.setParagraphAttributes(this.tpText.getSelectionStart(), this.tpText.getSelectionEnd() - this.tpText.getSelectionStart(), this.tpText.getStyle("miEstilo"), true);
        }
        if (justified) {
            StyleConstants.setAlignment(estilo, StyleConstants.ALIGN_JUSTIFIED);
            doc.setParagraphAttributes(this.tpText.getSelectionStart(), this.tpText.getSelectionEnd() - this.tpText.getSelectionStart(), this.tpText.getStyle("miEstilo"), true);
        }
    }

    private void disableNav(Container c) {
        for (Component x : c.getComponents()) {
            if (x instanceof JComboBox) {
                ((JComboBox) x).setEnabled(false);
            } else if (x instanceof JButton) {
                String text = ((JButton) x).getText();
                if (text == null || text.isEmpty()) {
                    ((JButton) x).setEnabled(false);
                }
            } else if (x instanceof Container) {
                disableNav((Container) x);
            }
        }
    }

    public void openFile(File file) {
        String cont = "";
        try {

            String filePath = file.getPath();

            if (filePath.endsWith(".editordoc")) {
                FileInputStream entrada = new FileInputStream(file);
                ObjectInputStream objeto = new ObjectInputStream(entrada);
                StyledDocument temp;
                this.currentFile = file;
                try {

                    while ((temp = (StyledDocument) objeto.readObject()) != null) {
                        documento = temp;
                    }
                } catch (Exception e) {

                }

                entrada.close();
                try {
                    cont = this.documento.getText(0, this.documento.getLength());
                } catch (BadLocationException e) {

                }
                this.tpText.setText(cont);
                this.tpText.setStyledDocument((StyledDocument) documento);
            } else {

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void saveFile(File archivo) {
        FileOutputStream fw = null;
        ObjectOutputStream bw = null;
        try {
            fw = new FileOutputStream(archivo);
            bw = new ObjectOutputStream(fw);
            bw.writeObject(documento);
        } catch (Exception e) {
        } finally {
            try {
                bw.close();
                fw.close();
            } catch (Exception e) {
            }
        }
    }
    public void addUsers() {
        FileOutputStream fw = null;
        ObjectOutputStream bw = null;
        try {
            fw = new FileOutputStream(fileusers, true);
            bw = new ObjectOutputStream(fw);
            for (User u : users) {
                bw.writeObject(u);
            }
            bw.flush();
        } catch (Exception e) {

        } finally {
            try {
                bw.close();
                fw.close();

            } catch (Exception e) {

            }
        }
    }
    public void cargarUsers() {
        try {
            users = new ArrayList();
            User temp;
            if (fileusers.exists()) {
                FileInputStream entrada = new FileInputStream(fileusers);
                ObjectInputStream objeto = new ObjectInputStream(entrada);
                try {
                    while ((temp = (User) objeto.readObject()) != null) {
                        users.add(temp);
                    }
                } catch (EOFException e) {

                }
                objeto.close();
                entrada.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private String fontLetter = "Monospaced";
    private boolean bold = false;
    private boolean italics = false;
    private boolean underline = false;
    private int size = 12;
    private Color colour = Color.black;
    private Color background = Color.white;
    private JFileChooser fileSelect = new JFileChooser();
    public File currentFile;
    private boolean center;
    private boolean left;
    private boolean right;
    private boolean justified;
    private boolean nuevo = true;
    StyledDocument doc;
    Document documento;
    String logAs;
    String admin = "Admin";
    String password = "password";
    ArrayList<User> users = new ArrayList();
    String path = "./Z\\Users";
    ArrayList<File> music = new ArrayList();
    MP3Player player;
    DefaultComboBoxModel fonts;
    File fileusers = new File("./Z/Users.miniwindows");
}
